@use 'sass:map';
@use 'sass:list';
@import './mixins_';

$spaceOrigin:
  'm' margin,
  'p' padding;
$spacePosition:
  't' top,
  'b' bottom,
  'l' left,
  'r' right;
$spacePositionXY:
  'x' left right,
  'y' top bottom;
$spaceSizing:
  -9  -144,
  -2  -32,
  -20 -320,
  -90  -5.625,
  -12 -0.75,
  -49 -3.0625,
  0 0,
  1 0.0625,
  2 0.125,
  4 0.25,
  5 0.315,
  8 0.5,
  6 0.375,
  10 0.625,
  11 0.6875,
  12 0.75,
  14 0.875,
  15 0.9375,
  16 1,
  18 1.125,
  20 1.25,
  21 1.3125,
  22 1.375,
  24 1.5,
  28 1.8,
  32 2,
  40 2.5,
  44 2.75,
  434 27.125,
  36 2.25,
  40 2.5,
  50 3.125,
  70 4.375,
  74 4.625,
  80 5,
  100 6.25,
  60 3.75,
  64 4,
  48 3,
  80 5,
  81 5.0625,
  84 5.25,
  90 5.625,
  100 6.25,
  118 7.375,
  140 8.75,
  150 9,
  180 11.25,
  200 12.5,
  250 15.625,
  300 17.85,
  310 19.375,
  320 20,
  330 20.625,
  350 21.875,
  450 28.125,
  500 31.25,
  700 43.75,
  600 37.5,
  610 38.125;


@each $origin in $spaceOrigin {
  @each $position in $spacePosition {
    @each $size in $spaceSizing {
      .#{list.nth($origin, 1)}-#{list.nth($position, 1)}-#{list.nth($size, 1)} {
        #{list.nth($origin, 2)}-#{list.nth($position, 2)}: #{list.nth($size, 2)}rem !important;
      }
    }
  }
}

@each $origin in $spaceOrigin {
  @each $position in $spacePositionXY {
    @each $size in $spaceSizing {
      .#{list.nth($origin, 1)}-#{list.nth($position, 1)}-#{list.nth($size, 1)} {
        #{list.nth($origin, 2)}-#{list.nth($position, 2)}: #{list.nth($size, 2)}rem !important;
        #{list.nth($origin, 2)}-#{list.nth($position, 3)}: #{list.nth($size, 2)}rem !important;
      }
    }
  }
}

@each $origin in $spaceOrigin {
  @each $size in $spaceSizing {
    .#{list.nth($origin, 1)}-#{list.nth($size, 1)} {
      #{list.nth($origin, 2)}: #{list.nth($size, 2)}rem !important;
    }
  }
}

/* Display properties */
$displayContent: flex, block, inline-block, inline-flex, grid, none;

@each $display in $displayContent {
  .d-#{$display} {
    display: #{$display};
  }
}

/* Display grid column properties */

$grid-cols: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;

@each $col in $grid-cols {
  .grid-cols-#{$col} {
    display: grid;
    grid-template-columns: repeat(#{$col}, minmax(0, 1fr));
  }
}

@each $row in $grid-cols {
  .grid-rows-#{$row} {
    display: grid;
    grid-template-rows: repeat(#{$row}, minmax(0, 1fr));
  }
}

/* Flex size properties */
$flexSize: 1, 4;

@each $size in $flexSize {
  .flex-#{$size} {
    flex: #{$size};
  }
}

@each $size in $flexSize {
  .flex-grow-#{$size} {
    flex-grow: #{$size};
  }
}

$flexWrap: wrap, no-wrap, wrap-reverse;

@each $wrap in $flexWrap {
  .flex-wrap-#{$wrap} {
    flex-wrap: #{$wrap};
  }
}

/* Flex direction properties */
$flexDirection: column;

@each $direction in $flexDirection {
  .flex-#{list.nth($direction, 1)} {
    flex-direction: #{list.nth($direction, 1)};
  }
}

/* Align Items properties */
$alignItems: center,left,right, flex-end, flex-end, baseline;

@each $align in $alignItems {
  .align-#{$align} {
    align-items: #{$align};
  }
}

/* Justify content properties */
$justifyContent: center,start, space-between, flex-end, flex-start;

@each $justify in $justifyContent {
  .justify-#{$justify} {
    justify-content: #{$justify} !important;
  }
}

/* Cursor pointer properties */
$cursorPointer: pointer, default, not-allowed;

@each $cursor in $cursorPointer {
  .cursor-#{$cursor} {
    cursor: #{$cursor} !important;
  }
}

/* Width properties */
$width:
  1, 3, 4, 10, 12, 14, 16, 20, 24, 36, 40, 44, 48, 50, 60, 64, 68, 70, 75, 82, 98, 115, 116, 120, 136, 165, 170, 200, 204,
  207, 214, 220, 230, 240, 250, 260, 266, 270, 280,287, 290, 300, 330, 346, 350, 380, 400, 410, 440, 450, 460, 476, 500,
  526, 550, 600, 650, 664, 700, 750, 800, 1206, 1300;

@each $width in $width {
  .w-#{$width} {
    width: $width + px !important;
  }
}

/* Width in percentage properties */
$widthPercentage:
  15 15%,
  20 20%,
  25 25%,
  30 30%
  45 45%,
  50 50%,
  60 60%,
  65 65%,
  70 70%,
  75 75%,
  80 80%,
  85 85%,
  100 100%
  252 252%,
  320 320%,
  400 400%,
  500 500%;

@each $widthName, $widthValue in $widthPercentage {
  .width-#{$widthName} {
    width: #{$widthValue};
  }
}

/* Min Width properties */
$minWidth: 0, 40, 90, 50, 70, 90, 100, 120, 130, 140, 150, 242, 242,980;

@each $width in $minWidth {
  .min-w-#{$width} {
    min-width: #{$width}px !important;
  }
}

/* Max Width properties */
$maxWidth: 120, 165, 250, 260, 300, 440, 432, 440, 436, 500, 1206, 1336;

@each $width in $maxWidth {
  .max-w-#{$width} {
    max-width: #{$width}px;
  }
}

/* Border radius properties */
$borderRadius: 0, 2, 4, 6, 8, 10, 12, 16, 40,85, 100, 360;

@each $radiusValue in $borderRadius {
  .radius-#{$radiusValue} {
    border-radius: #{$radiusValue}px !important;
  }

  // Two values (top/bottom, left/right)
  @each $secondRadiusValue in $borderRadius {
    .radius-#{$radiusValue}-#{$secondRadiusValue} {
      border-radius: #{$radiusValue}px #{$secondRadiusValue}px;
    }

    // Four values (top-left, top-right, bottom-right, bottom-left)
    @each $thirdRadiusValue in $borderRadius {
      @each $fourthRadiusValue in $borderRadius {
        .radius-#{$radiusValue}-#{$secondRadiusValue}-#{$thirdRadiusValue}-#{$fourthRadiusValue} {
          border-bottom-left-radius: #{$fourthRadiusValue}px;
          border-bottom-right-radius: #{$thirdRadiusValue}px;
          border-top-right-radius: #{$secondRadiusValue}px;
          border-top-left-radius: #{$radiusValue}px;
        }
      }
    }
  }
}

/* Border width + color Properties here */
$borderColor:
  'primary' var(--stroke-primary),
  'brand' var(--border-brand),
  'black' var(--text-primary),
  'secondary' var(--neutral-color-200),
  'tertiary' var(--border-tertiary),
  'dropdown-default' var(--dropdown-default-stroke),
  'modal-stroke' var(--modal-stroke),
  'surface-overall' var(--surface-overall-background),
  'info-message' var(--info-message-warning-stroke),
  'text-success' var(--text-success),
  'btn-outline-error' var(--button-outline-error-default),
  'status-outer-red' var(--red-color-200),
  'status-outer-green' var(--green-color-200),
  'red' var(--default),
  'resubmitted' var(--yellow-color-200),
  'blue' var(--brand-color-800),
  'light-blue' var(--brand-color-200),
  'selected-image' var(--brand-color-600),
  'brand-dark' var(--brand-color-900);

$borderPosition: top, right, center, bottom, left;
$borderPositionAll: all;
$borderWidth: 0, 1, 3, 5, 52; // Replaced `none` with `0`

@each $color in $borderColor {
  @each $position in $borderPosition {
    @each $width in $borderWidth {
      .border-#{$position}-#{list.nth($color, 1)}-#{$width} {
        border-#{$position}: #{$width}px solid #{list.nth($color, 2)} !important;
      }
    }
  }
}

@each $color in $borderColor {
  @each $position in $borderPositionAll {
    @each $width in $borderWidth {
      .border-#{list.nth($color, 1)}-#{$width} {
        border: #{$width}px solid #{list.nth($color, 2)} !important;
      }
    }
  }
}

/* No border */
.border-none {
  border: none,7 !important;
}

@each $position in $borderPosition {
  .border-#{$position} {
    border: #{$position,1}px;
  }
}

/* Image sizes properties */
$imageSize: 16, 20, 24, 40;

@each $size in $imageSize {
  .img-#{$size} {
    width: #{$size}px;
    height: #{$size}px;
  }
}

$imageFits: cover, contain;

@each $fit in $imageFits {
  .img-fit-#{$fit} {
    object-fit: #{$fit} !important;
  }
}

/* Overflow properties here */
$overflow: hidden, scroll, auto;

$overflowDirection: x, y;

$overflowDirection: x, y;

@each $overflow in $overflow {
  .overflow-#{$overflow} {
    overflow: #{$overflow};
  }
}

@each $overflowDir in $overflowDirection {
  @each $overflow in $overflow {
    .overflow-#{$overflowDir}-#{$overflow} {
      overflow-#{$overflowDir}: #{$overflow};
    }
  }
}
.image-container {
  @include image-container;

  .text-overlay {
    @include text-overlay(center);
    font-size: 1.5rem;
    // background-color: black;
  }
}
.image-overlay{
  @include image-overlay
}

/* Text align Properties */
$textAlign: center, right, left;

@each $align in $textAlign {
  .text-#{$align} {
    text-align: $align !important;
  }
}

/* Text decoration Properties */
$textDecoration: dashed, dotted, double, line-through, none, overline, solid, underline, wavy, none;

@each $decoration in $textDecoration {
  .text-#{$decoration} {
    text-decoration: $decoration !important;
  }
}

/* Text transform Properties */
$textTransform: capitalize, uppercase, double, none;

@each $transform in $textTransform {
  .transform-#{$transform} {
    text-transform: $transform !important;
  }
}

/* List style Properties */
.list-style-none {
  list-style: none !important;
}

/* Height calculation properties */
$heightSize: 48, 44, 65, 120, 146, 160, 180, 380;

@each $size in $heightSize {
  .h-calc-#{$size} {
    height: calc(100vh - #{$size}px);
  }
}

/* Height properties */

$heightSize:
  1, 3, 4, 5, 10, 11, 12, 14, 16, 18, 20, 24, 26, 28, 30,32, 36, 40, 44, 48, 50, 53, 60, 70, 72,74, 80,82,83,84,85,86,87,88,89, 120, 180, 200, 250, 266,
  300, 328, 330, 350, 380, 400, 420, 456, 500, 640;

@each $size in $heightSize {
  .h-#{$size} {
    height: #{$size}px !important;
  }
}

/* Min Height properties */
$minHeight: 30, 48, 60, 80,100, 120, 200;
$relativeHeight: 10, 20, 30, 40, 50, 60, 70, 80, 90, 100;

@each $height in $relativeHeight {
  .min-height-#{$height} {
    min-height: $height + vh;
  }
}

@each $height in $minHeight {
  .min-h-#{$height} {
    min-height: $height + px;
  }
}

/* Max Height Properties */
$maxHeight: 132, 280, 436, 500;

@each $height in $maxHeight {
  .max-h-#{$height} {
    max-height: $height + px;
  }
}

/* Height in percentage */
$heightPercentage:
  50 50%,
  70 70%,
  80 80%,
  100 100%;

@each $heightName, $heightValue in $heightPercentage {
  .height-#{$heightName} {
    height: #{$heightValue};
  }
}

/* Font Properties Here  */
$colors:
  'b' var(--button-filled-error-text),
  'primary' var(--neutral-color-50),
  'secondary' var(--text-secondary),
  'tertiary' var(--text-tertiary),
  'f-s' var(--text-filled-secondary),
  't-d' var(--text-table-default),
  'logo' var(--neutral-color-50),
  'success' var(--text-success),
  'error' var(--text-error),
  'hold' var(--brand-color-600),
  'error-s' var(--text-error-secondary),
  'err-text' var(--red-color-500),
  'red' var(--default),
  'warning' var(--text-brand-secondary),
  'w-t' var(--yellow-color-500),
  'nav-primary' var(--yellow-color-150),
  'b-s' var(--brand-color-600),
  'tertiary' var(--text-tertiary),
  'white-primary' var(--neutral-color-50),
  'b-tertiary' var(--brand-color-400),
  'b-blue' var(--tex),
  'black-secondary' var(--text-black-secondary),
  'light-gray' var(--text-light-gray),
  'text-white' var(--neutral-color-50),
  'white' var(--background-white),
  'status-red' var(--red-color-600),
  'warning-secondary' var(--yellow-color-600),
  'search-text' var (--neutral-color-400),
  'badge-hold' var(--hold-badge),
  'green' var(--green-color-500),
  'btn-filled-primary' var(--text-button-filled-primary);

$textSize:
  2 0.125,
  4 0.25,
  10 0.62,
  12 0.75,
  13 0.81,
  14 0.9,
  15 0.93,
  16 1,
  17 1.06,
  18 1.12,
  19 1.18,
  20 1.25,
  22 1.375,
  23 1.4375,
  24 1.5,
  26 1.625,
  27 1.6875,
  28 1.75,
  30 1.875,
  32 2,
  34 2.125,
  36 2.25,
  40 2.5,
  50 3.125,
  48 3,
  80 5,
  81 5.0625,
  84 5.25,
  90 5.625,
  100 6.25,
  110 6.875,
  118 7.375,
  140 8.75,
  150 9,
  180 11.25,
  200 12.5,
  250 15.625,
  300 17.85;

$lineHeight: 0, 3,4,5,8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 30, 32, 34, 36, 40, 42,50,51,52,53, 56 ,60, 65, 70, 75, 80,110,120;
$fontWeight: 100,200, 400, 500, 600, 700, 800;

@each $size, $sizeValue in $textSize {
  @each $height in $lineHeight {
    @if ($height > $size) {
      @each $weight in $fontWeight {
        @each $colorName, $colorValue in $colors {
          .f-#{$size}-#{$height}-#{$weight}-#{$colorName} {
            font-size: #{$sizeValue}rem !important;
            line-height: #{$height}px !important;
            font-weight: #{$weight} !important;
            color: #{$colorValue} !important;
          }
        }
      }
    }
  }
}

$font-families:
  'primary' "'Bricolage Grotesque', sans-serif",
  'secondary' "'Poppins', sans-serif",
  'brand'" 'Playfair Display', serif",
  'title' "'times new roman',times,serif",
  'cursive' "pinyon-script, pinyon script, cursive";

@each $font, $fontValue in $font-families {
  .font-#{$font} {
    font-family: #{$fontValue} !important;
  }
}

/* Icon Color properties */
$colors:
  'primary' var(--text-primary),
  'icon-default' var(--input-icon-default),
  'white' var(--neutral-color-50),
  'black' var(--text-primary),
  'brand' var(--brand-color-600),
  'secondary' var(--neutral-color-400),
  'tertiary' var(--neutral-color-500),
  'success' var(--green-color-500),
  'warning' var(--yellow-color-500),
  'error' var(--red-color-50),
  'brand-secondary' var(--brand-color-600),
  'brand-tertiary' var(--brand-color-400),
  'dropdown-icon' var(--dropdown-icon),
  'green' var(--green-color-500),
  'icon-tertiary' var(--neutral-color-500),
  'blue' var(--brand-color-700),
  'wallet' var(--neutral-color-700),
  'red' var(--red-color-600);

$fontSize:
-49 -3.0625,
  1 0.625,
  2 0.125,
  12 0.75,
  16 1,
  17 1.065,
  18 1.125,
  20 1.25,
  24 1.5,
  32 2,
  40 2.5,
  80 5,48 3,
  80 5,
  81 5.0625,
  84 5.25,
  90 5.625,
  100 6.25,
  118 7.375,
  140 8.75,
  150 9,
  180 11.25,
  200 12.5,
  250 15.625,
  300 17.85;
  


@each $colorName, $colorValue in $colors {
  @each $size in $fontSize {
    .icon-#{list.nth($size, 1)}-#{$colorName} {
      color: $colorValue;
      font-size: #{list.nth($size, 2)}rem;

      &.hover {
        &:hover {
          color: var(--brand-color-900) !important;
        }
      }
    }
  }
}

.image-overlay{
  @include image-overlay
}
/* Background Color Properties*/
$bgColor:
  'primary' var(--surface-primary),
  'btn-primary' var(--bg-button),
  'sidenav' var(--black-color-400),
  'success' var(--chip-success),
  'warning' var(--warning),
  'error' var(--error),
  'e-bg' var(--red-color-100),
  'error-secondary' var(--error-secondary),
  'brand-color' var(--brand-color-800),
  'badge-bg' var(--neutral-color-950),
  'status-red' var(--red-color-600),
  'status-green' var(--green-color-600),
  'status-outer-red' var(--red-color-200),
  'status-outer-green' var(--green-color-200),
  're-submitted' var(--resubmitted),
  'hold' var(--hold),
  'hold-secondary' var(--brand-color-50),
  'secondary' var(--background-secondary),
  'bg-button' var(--bg-button),
  'white' var(--background-white),
  'light-green' var(--green-color-100),
  'boldBrand' var(--bg-bold-brand),
  'brand' var(--bg-brand),
  'brand-secondary' var(--brand-color-600),
  'payment-success' var(--green-color-100),
  'brand-blue' var(--brand-color-800),
  'brand-bg' var(--brand-color-200),
  'warning' var(--yellow-color-50),
  'payment-pending' var(--yellow-color-100),
  'gray' var(--stroke-primary),
  'black-shade' #000000cc,
  'search' var(--neutral-color-100),
  'cover' var(--brand-color-800),
  'none' transparent,
  'brand-dark' var(--brand-color-900),
  'badge-bg-blue' var(--hold-border),
  'notification' var(--brand-color-100),
  'purple' var(--purple),
  'card' var(--card-bg),
  'brand-darker' var(--brand-color-950);

@each $colorName, $colorValue in $bgColor {
  .bg-#{$colorName} {
    background-color: $colorValue !important;
  }
}

/* Width in percentage properties */
$opacityPercentages:
  0 0%,
  10 10%,
  20 20%,
  33 33%,
  50 50%,
  55 55%,
  60 60%,
  70 70%,
  80 80%,
  85 85%,
  100 100%,;

@each $opacityName, $opacityValue in $opacityPercentages {
  .opacity-#{$opacityName} {
    opacity: #{$opacityValue};
  }
}

/* Position relative properties */
$position: relative, absolute, fixed, sticky;

@each $positionName in $position {
  .position-#{$positionName} {
    position: $positionName !important;
  }
}

/*Gap property*/
$gapSizes: 1 2 3 4 5 6 7 8 9 10 12 14 15 16 18 20 25 40;

@each $gap in $gapSizes {
  .gap-#{$gap} {
    gap: $gap * 4px !important;
  }
}

/* Location properties */
$locationSize:
  -160,
  -44,
  -26,
  -20,
  2,
  0,
  5,
  8,
  12,
  16,
  18,
  20,
  25,
  26,
  30,
  35,
  40,
  52,
  55,
  57,
  60,
  66,
  72,
  85,
  120,
  125;
$locationSizePercent:
  50 50%,
  83 83%;
$locationName: top, left, right, bottom;

@each $location in $locationName {
  @each $size in $locationSize {
    .#{$location}-#{$size} {
      #{$location}: #{$size}px;
    }
  }
}

@each $location in $locationName {
  @each $sizeName, $sizePercent in $locationSizePercent {
    .#{$location}-p-#{$sizeName} {
      #{$location}: $sizePercent;
    }
  }
}

/* Z-Index properties here */
$zIndexSize: -1, 1, 2, 10, 11, 12, 1051;

@each $indexSize in $zIndexSize {
  .z-index-#{$indexSize} {
    z-index: $indexSize;
  }
}

/* Color Map with Default, Hover, and Disabled */
$buttonColors: (
  'primary': (
    'default': var(--brand-color-800),
    'hover': var(--brand-color-900),
    'disabled': var(--brand-color-800),
    'hover-outline-text': var(--brand-color-50),
    'color': var(--neutral-color-50),
    'color-outline': var(--brand-color-800),
  ),
  'secondary': (
    'default': var(--neutral-color-900),
    'hover': var(--neutral-color-700),
    'disabled': var(--neutral-color-900),
    'hover-outline-text': var(--neutral-color-50),
    'color': var(--neutral-color-100),
    'color-outline': var(--neutral-color-900),
  ),
  'error': (
    'default': var(--red-color-500),
    'hover': var(--red-color-600),
    'disabled': var(--red-color-500),
    'hover-outline-text': var(--red-color-50),
    'color': var(--neutral-color-50),
    'color-outline': var(--red-color-500),
  ),
);

$buttonTypes: 'default', 'outline', 'text';
$buttonSizes: 'default', 'large';

$padding-default: 8px 16px;
$height-default: 40px;
$height-large: 44px;
$font-size-default: 14px;
$font-size-large: 14px;
$border-radius: 6px;

.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: 500;
  border-radius: $border-radius;
  cursor: pointer;
  transition: all 0.3s ease;
 // font-family: 'Bricolage Grotesque', sans-serif !important;

  padding: $padding-default;
  font-size: $font-size-default;
  height: $height-default;

  &.lg {
    padding: $padding-default;
    font-size: $font-size-large;
    height: $height-large;
  }

  &.menu {
    justify-content: flex-start !important;
    border-radius: 0px !important;
    text-decoration: none !important;
  }
  // Define a utility for positioning elements absolutely
$textPosition:
  'center' 50% 50%,
  'top-left' 0% 0%,
  'top-right' 0% 100%,
  'bottom-left' 100% 0%,
  'bottom-right' 100% 100%;

@each $position in $textPosition {
  .text-#{list.nth($position, 1)} {
    position: absolute;
    top: #{list.nth($position, 2)};
    left: #{list.nth($position, 3)};
    transform: translate(-50%, -50%);
  }
}


  // Loop to generate color variations, type, and states
  @each $colorName, $colorMap in $buttonColors {
    @each $type in $buttonTypes {
      // Default state
      &-#{$colorName}-#{$type} {
        $default-color: map.get($colorMap, 'default');
        $hover-color: map.get($colorMap, 'hover');
        $disabled-color: map.get($colorMap, 'disabled');
        $hover-outline-text-color: map.get($colorMap, 'hover-outline-text');
        $color: map.get($colorMap, 'color');
        $color-outline: map.get($colorMap, 'color-outline');

        @if $type == 'default' {
          background-color: #{$default-color};
          color: #{$color};
          border: 1px solid #{$default-color};
        } @else if $type == 'outline' {
          background-color: transparent;
          color: #{$color-outline};
          border: 1px solid #{$default-color};
        } @else if $type == 'text' {
          background-color: transparent;
          color: #{$color-outline};
          border: none;
        }

        // Hover state
        &:hover:not(.disabled) {
          @if $type == 'default' {
            background-color: #{$hover-color};
            border-color: #{$hover-color};
            color: #{$color};
          } @else if $type == 'outline' {
            background-color: #{$hover-outline-text-color};
            color: #{$color-outline};
            border-color: #{$hover-color};
          } @else if $type == 'text' {
            background-color: #{$hover-outline-text-color};
          }
        }

        // Disabled state
        &.disabled {
          background-color: if($type == 'text' or $type == 'outline', transparent, $disabled-color);
          border-color: if($type == 'text', transparent, $disabled-color);
          pointer-events: none;
          opacity: 0.5;

          @if $type == 'default' {
            color: #{$color};
          } @else if $type == 'outline' {
            color: #{$color-outline};
          } @else if $type == 'text' {
            color: #{$color-outline};
          }
        }
      }
    }
  }
}
